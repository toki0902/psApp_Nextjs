openapi: 3.0.0

info:
  title: ps-app API
  version: "1.0.0"

servers:
  - url: https://localhost:3000/api/v1

components:
  schemas:
    Video:
      type: object
      properties:
        videoId:
          type: string
        url:
          type: string
        views:
          type: integer
        thumbnail:
          type: string
        title:
          type: string
    Playlist:
      type: object
      properties:
        playlistTitle:
          type: string
        videos:
          type: array
          items:
            type: object
            properties:
              video:
                $ref: "#/components/schemas/Video"
              videoMemberId:
                type: number
        playlistId:
          type: string
        createdAt:
          type: string
        ownerId:
          type: string

paths:
  /search:
    get:
      summary: Get video list from keyword user entered
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: success response containing search results array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Video"

  /users/{userId}/playlists:
    get:
      summary: Get playlist from userId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: success response containing playlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  playlists:
                    type: array
                    items:
                      $ref: "#/components/schemas/Playlist"
    post:
      summary: Create new playlist
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                playlistTitle:
                  type: string
                  example: playlist!
      responses:
        201:
          description: success response containing info of new playlist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"

  /users/{userId}/playlists/title/{playlistTitle}:
    get:
      summary: Get playlist from userId and playlistTitle
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: playlistId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: success response containing playlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  playlist:
                    $ref: "#/components/schemas/Playlist"

  /users/{userId}/playlists/id/{playlistId}:
    delete:
      deprecated: false
      summary: Delete playlist by playlistId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: playlistId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: notify deletion

  /users/{userId}/playlists/title/{playlistTitle}/videos:
    post:
      summary: Add new video to an already existing playlist
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: playlistTitle
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                videoId:
                  type: string
                  example: DHGOI"%$&KMSSM
      responses:
        201:
          description: success response containing a message that the new video has been added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /sessions/{provider}:
    post:
      summary: create and return provider auth URL
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
      responses:
        302:
          description: successful response containing created provider URL
          headers:
            Location:
              description: the URL the client should be redirected
              schema:
                type: string
                format: uri
              example: ${process.env.NEXTAUTH_URL}/signin/${provider}?callbackUrl=${callbackUrl}

  /sessions/callback:
    get:
      summary: after signIn or signUp, Returns a response that causes the client to store a JWT token created by the provider in a cookie
      responses:
        302:
          description: redirect home page and set authentication cookie
          headers:
            Location:
              description: home page URL
              schema:
                type: string
                format: uri
              example: https://example.ps.app
            Set-Cookie:
              description: set authentication token in cookie
              schema:
                type: string
              example: "authToken=your-token; HttpOnly; Max-Age=86400; SameSite=Strict"
